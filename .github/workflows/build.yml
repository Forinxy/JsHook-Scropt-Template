# 🛠️ 构建脚本
name: 🛠️ 构建脚本
# 这是一个构建脚本的工作流程
# 工作流程触发条件
on:
  # 当push到main分支时触发
  push:
    branches: [ "main" ]
  # 当手动触发时触发
  workflow_dispatch:

# 工作流权限
permissions:
  # 可写内容权限
  contents: write

# 一个工作流由一个或多个任务组成
jobs:
  # 一个名为 "build" 的任务
  build:
    # 指定该任务运行的虚拟环境，这里使用的是最新版本的 Ubuntu
    runs-on: ubuntu-latest
    # 任务的步骤
    steps:
      # 检出代码
      - name: 📂 检出代码 # 第一步，检出仓库代码
        uses: actions/checkout@v4 # 使用 actions/checkout 这个第三方 Action 来检出代码
      
      - name: 📦 配置 Node.js 环境 # 第二步，配置 Node.js 环境
        uses: actions/setup-node@v4
        with: # 配置参数
          node-version: 20 # 指定 Node.js 版本为 20
          
      - name: ⏰ 设置构建日期 # 第三步，设置构建日期
        id: builddate # 该步骤的 ID 为 builddate
        # 使用 shell 命令将构建日期写入 GitHub 环境变量中
        run: echo "BUILD_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
        # $GITHUB_ENV 是一个环境变量，用于存储工作流程的环境变量
        # 这里使用 echo 命令将构建日期写入该环境变量中，以便后续步骤使用
        # 格式为 YYYYMMDD，日期格式为四位年份+两位月份+两位日期
        
      - name: 🔨 构建脚本 # 第四步，构建脚本
        # 使用 git 克隆仓库到临时文件夹
        run: |
          # 克隆仓库到临时文件夹
          git clone https://github.com/bcmdy/JsHook-Scropt-Template Script.tmp
          # 给临时文件夹中所有文件添加可执行权限
          chmod +x -R ./Script.tmp
          # 切换到临时文件夹
          cd ./Script.tmp
          # 执行 npm run build 命令进行构建
          npm run build

      # 创建 GitHub Release 的步骤
      - name: 🎁 创建 GitHub Release (${{ github.run_number }})
        env:
          # 从 GitHub 环境变量中获取构建日期
          BUILD_DATE: ${{ env.BUILD_DATE }}
        continue-on-error: true
        # 使用 softprops/action-gh-release 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        # 指定 Release 的 tag 名称，使用 GitHub 环境变量中的构建日期
        with:
          # 指定 Release 的 tag 名称
          tag_name: ${{ env.BUILD_DATE }}_v${{ github.run_number }}
          # 指定 Release 的文件列表
          files: "Script.tmp/dist/build.js"
          generate_release_notes: true



